language: rust
sudo: required

env:
  global:
    - CRATE_NAME=dmc

matrix:
  include:
    # Put these first because they supposedly take
    # more time to setup and are easy to fail.
    # Commenting these until https://github.com/japaric/cross/issues/110
    # is fixed.
    #- env: TARGET=asmjs-unknown-emscripten
    #- env: TARGET=asmjs-unknown-emscripten
    #  rust: nightly
    #- env: TARGET=wasm32-unknown-emscripten
    #- env: TARGET=wasm32-unknown-emscripten
    #  rust: nightly

    # Linux
    - env: TARGET=x86_64-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: nightly
    - env: TARGET=i686-unknown-linux-gnu
    - env: TARGET=i686-unknown-linux-gnu
      rust: nightly

    # OSX
    - env: TARGET=x86_64-apple-darwin
      os: osx
    - env: TARGET=x86_64-apple-darwin
      os: osx
      rust: nightly
    - env: TARGET=i686-apple-darwin
      os: osx
    - env: TARGET=i686-apple-darwin
      os: osx
      rust: nightly

    # *BSD
    #- env: TARGET=i686-unknown-freebsd
    #- env: TARGET=x86_64-unknown-freebsd
    #- env: TARGET=x86_64-unknown-netbsd

    # Other architectures
    #
    # Commenting Android targets because even though they're
    # supported, they fail at the end for obscure reasons.
    #- env: TARGET=arm-linux-androideabi
    #- env: TARGET=arm-linux-androideabi
    #  rust: nightly
    #- env: TARGET=armv7-linux-androideabi
    #- env: TARGET=armv7-linux-androideabi
    #  rust: nightly
    #- env: TARGET=aarch64-linux-android
    #- env: TARGET=aarch64-linux-android
    #  rust: nightly
    #
    #- env: TARGET=arm-unknown-linux-gnueabi
    #- env: TARGET=arm-unknown-linux-gnueabi
    #  rust: nightly
    # arm-unknown-linux-gnueabihf doesn't work with `cross`
    #- env: TARGET=arm-unknown-linux-gnueabihf
    #- env: TARGET=arm-unknown-linux-gnueabihf
    #  rust: nightly
    #- env: TARGET=armv7-unknown-linux-gnueabihf
    #- env: TARGET=armv7-unknown-linux-gnueabihf
    #  rust: nightly
    #- env: TARGET=aarch64-unknown-linux-gnu
    #- env: TARGET=aarch64-unknown-linux-gnu
    #  rust: nightly
    #- env: TARGET=mips-unknown-linux-gnu
    #- env: TARGET=mips-unknown-linux-gnu
    #  rust: nightly
    #- env: TARGET=mips64-unknown-linux-gnuabi64
    #- env: TARGET=mips64-unknown-linux-gnuabi64
    #  rust: nightly
    #- env: TARGET=mips64el-unknown-linux-gnuabi64
    #- env: TARGET=mips64el-unknown-linux-gnuabi64
    #  rust: nightly
    #- env: TARGET=mipsel-unknown-linux-gnu
    #- env: TARGET=mipsel-unknown-linux-gnu
    #  rust: nightly
    #- env: TARGET=powerpc-unknown-linux-gnu
    #- env: TARGET=powerpc-unknown-linux-gnu
    #  rust: nightly
    #- env: TARGET=powerpc64-unknown-linux-gnu
    #- env: TARGET=powerpc64-unknown-linux-gnu
    #  rust: nightly
    #- env: TARGET=powerpc64le-unknown-linux-gnu
    #- env: TARGET=powerpc64le-unknown-linux-gnu
    #  rust: nightly
    #- env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1
    #- env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1
    #  rust: nightly

addons:
  apt:
    packages:
      - libgl1-mesa-dev
      - libgl1-mesa-dev:i386
      - libgl1-mesa-glx
      - libgl1-mesa-glx:i386
      - mesa-common-dev
      - mesa-common-dev:i386
      - libx11-dev
      - libx11-dev:i386
      - libxcursor-dev
      - libxcursor-dev:i386
      - libxi-dev
      - libxi-dev:i386
      - libxinerama-dev
      - libxinerama-dev:i386
      - libxrandr-dev
      - libxrandr-dev:i386
      - libxrender-dev
      - libxrender-dev:i386
      - libudev-dev
      - libevdev-dev
      #- xserver-xorg-video-dummy
      #- xpra
      #- xorg-dev
      #- mesa-utils
      #- libxmu-dev
      #- libxv-dev


before_install:
  - set -e

install:
  - source ~/.cargo/env || true
  - rustup target add $TARGET || true
  - pkg-config --list-all

script:
  - cargo build --target $TARGET
  - cargo build --target $TARGET --release
  - pushd examples/window
  - cargo build --target $TARGET
  - cargo build --target $TARGET --release
  - popd

after_script: set +e

# before_deploy:

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
